/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
    // Return false to exempt requests from being fulfilled by index.html.
    ({ request, url }) => {
        // If this isn't a navigation, skip.
        if (request.mode !== 'navigate') {
            return false;
        } // If this is a URL that starts with /_, skip.

        if (url.pathname.startsWith('/_')) {
            return false;
        } // If this looks like a URL for a resource, because it contains // a file extension, skip.

        if (url.pathname.match(fileExtensionRegexp)) {
            return false;
        } // Return true to signal that we want to use the handler.

        return true;
    },
    createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
    // Add in any other file extensions or routing criteria as needed.
    ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
    new StaleWhileRevalidate({
        cacheName: 'images',
        plugins: [
            // Ensure that once this runtime cache reaches a maximum size the
            // least-recently used images are removed.
            new ExpirationPlugin({ maxEntries: 50 }),
        ],
    })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting();
    }
});

// Any other custom service worker logic can go here.

// const FILES_TO_CACHE = [
//     '../src/assets/images/budget-tracker-min.png',
//     '../src/assets/images/gun-show-min.png',
//     '../src/assets/images/note-taker-min.png',
//     '../src/assets/images/portfolio-min.png',
//     '../src/assets/images/shop-shop-min.png',
//     '../src/assets/images/tutot-time-min.png',
//     '../src/assets/images/selfie.jpeg',
//     '../src/assets/images/0.png',
//     '../src/assets/images/1.png',
//     '../src/assets/images/2.png',
//     '../src/assets/images/3.png',
//     '../src/assets/images/4.png',
//     '../src/assets/images/5.png',
//     '../src/assets/images/6.png',
//     '../src/assets/images/7.png',
//     '../src/assets/images/email.png',
//     '../src/assets/images/github-logo.png',
//     '../src/assets/images/linkedin-logo.png',
//     '../src/assets/images/twitter-logo.png.png'
// ]

// const APP_PREFIX = 'Portfolio-';
// const VERSION = 'version_01';
// const CACHE_NAME = APP_PREFIX + VERSION;

// self.addEventListener('fetch', function (e) {
//     console.log('fetch request : ' + e.request.url)
//     e.respondWith(
//         caches.match(e.request).then(function (request) {
//             return request || fetch(e.request)
//         })
//     )
// })


// self.addEventListener('install', function (e) {
//     e.waitUntil(
//         caches.open(CACHE_NAME).then(function (cache) {
//             console.log('installing cache : ' + CACHE_NAME)
//             return cache.addAll(FILES_TO_CACHE)
//         })
//     )
// })

// self.addEventListener('activate', function (e) {
//     e.waitUntil(
//         caches.keys().then(function (keyList) {
//             let cacheKeeplist = keyList.filter(function (key) {
//                 return key.indexOf(APP_PREFIX);
//             });
//             cacheKeeplist.push(CACHE_NAME);

//             return Promise.all(
//                 keyList.map(function (key, i) {
//                     if (cacheKeeplist.indexOf(key) === -1) {
//                         console.log('deleting cache : ' + keyList[i]);
//                         return caches.delete(keyList[i]);
//                     }
//                 })
//             );
//         })
//     );
// });